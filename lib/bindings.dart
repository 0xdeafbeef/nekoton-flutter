// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Nekoton core bindings
class NekotonBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NekotonBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NekotonBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int create_storage(
    ffi.Pointer<ffi.Int8> data,
    ffi.Pointer<ffi.Pointer<NativeStorage>> storage_ptr,
  ) {
    return _create_storage(
      data,
      storage_ptr,
    );
  }

  late final _create_storage_ptr =
      _lookup<ffi.NativeFunction<_c_create_storage>>('create_storage');
  late final _dart_create_storage _create_storage =
      _create_storage_ptr.asFunction<_dart_create_storage>();

  void init(
    ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> post_cobject,
  ) {
    return _init(
      post_cobject,
    );
  }

  late final _init_ptr = _lookup<ffi.NativeFunction<_c_init>>('init');
  late final _dart_init _init = _init_ptr.asFunction<_dart_init>();

  int wait(
    int seconds,
    int send_port,
  ) {
    return _wait(
      seconds,
      send_port,
    );
  }

  late final _wait_ptr = _lookup<ffi.NativeFunction<_c_wait>>('wait');
  late final _dart_wait _wait = _wait_ptr.asFunction<_dart_wait>();

  int create_context(
    TransportParams params,
    ffi.Pointer<ffi.Int8> public_key,
    int contract_type,
    int subscription_port,
    ffi.Pointer<ffi.Int8> keystore_data,
    ffi.Pointer<ffi.Pointer<Context>> context_ffi,
  ) {
    return _create_context(
      params,
      public_key,
      contract_type,
      subscription_port,
      keystore_data,
      context_ffi,
    );
  }

  late final _create_context_ptr =
      _lookup<ffi.NativeFunction<_c_create_context>>('create_context');
  late final _dart_create_context _create_context =
      _create_context_ptr.asFunction<_dart_create_context>();

  int delete_context(
    ffi.Pointer<Context> context,
  ) {
    return _delete_context(
      context,
    );
  }

  late final _delete_context_ptr =
      _lookup<ffi.NativeFunction<_c_delete_context>>('delete_context');
  late final _dart_delete_context _delete_context =
      _delete_context_ptr.asFunction<_dart_delete_context>();

  int delete_gql_transport(
    ffi.Pointer<GqlTransport> gql_transport,
  ) {
    return _delete_gql_transport(
      gql_transport,
    );
  }

  late final _delete_gql_transport_ptr =
      _lookup<ffi.NativeFunction<_c_delete_gql_transport>>(
          'delete_gql_transport');
  late final _dart_delete_gql_transport _delete_gql_transport =
      _delete_gql_transport_ptr.asFunction<_dart_delete_gql_transport>();

  int delete_subscription(
    ffi.Pointer<TonWalletSubscription> subscription,
  ) {
    return _delete_subscription(
      subscription,
    );
  }

  late final _delete_subscription_ptr =
      _lookup<ffi.NativeFunction<_c_delete_subscription>>(
          'delete_subscription');
  late final _dart_delete_subscription _delete_subscription =
      _delete_subscription_ptr.asFunction<_dart_delete_subscription>();

  int send(
    ffi.Pointer<Context> ctx,
    ffi.Pointer<ffi.Int8> sign_data,
    int answer_port,
    ffi.Pointer<ffi.Int8> comment,
    ffi.Pointer<ffi.Int8> to,
    int amount,
  ) {
    return _send(
      ctx,
      sign_data,
      answer_port,
      comment,
      to,
      amount,
    );
  }

  late final _send_ptr = _lookup<ffi.NativeFunction<_c_send>>('send');
  late final _dart_send _send = _send_ptr.asFunction<_dart_send>();
}

abstract class ContractType {
  static const int SafeMultisig = 0;
  static const int SafeMultisig24h = 1;
  static const int SetcodeMultisig = 2;
  static const int Surf = 3;
  static const int WalletV3 = 4;
}

abstract class ExitCode {
  static const int Ok = 0;
  static const int FailedToCreateRuntime = 1;
  static const int RuntimeIsNotInitialized = 2;
  static const int TransportIsNotInitialized = 3;
  static const int SubscriptionIsNotInitialized = 4;
  static const int FailedToSubscribeToTonWallet = 5;
  static const int FailedToCreateKeystore = 6;
  static const int InvalidUrl = 7;
  static const int InvalidPublicKey = 8;
  static const int NoContextProvided = 9;
  static const int BadPassword = 10;
  static const int BadKeystoreData = 11;
  static const int BadSignData = 12;
  static const int BadWallet = 13;
  static const int BadComment = 14;
  static const int BadAddress = 15;
}

class Context extends ffi.Opaque {}

class GqlTransport extends ffi.Opaque {}

class NativeStorage extends ffi.Opaque {}

class TonWalletSubscription extends ffi.Opaque {}

class TransportParams extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> url;
}

typedef _c_create_storage = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> data,
  ffi.Pointer<ffi.Pointer<NativeStorage>> storage_ptr,
);

typedef _dart_create_storage = int Function(
  ffi.Pointer<ffi.Int8> data,
  ffi.Pointer<ffi.Pointer<NativeStorage>> storage_ptr,
);

typedef DartPostCObjectFnType = ffi.Uint8 Function(
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_init = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> post_cobject,
);

typedef _dart_init = void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> post_cobject,
);

typedef _c_wait = ffi.Int32 Function(
  ffi.Uint32 seconds,
  ffi.Int64 send_port,
);

typedef _dart_wait = int Function(
  int seconds,
  int send_port,
);

typedef _c_create_context = ffi.Int32 Function(
  TransportParams params,
  ffi.Pointer<ffi.Int8> public_key,
  ffi.Int32 contract_type,
  ffi.Int64 subscription_port,
  ffi.Pointer<ffi.Int8> keystore_data,
  ffi.Pointer<ffi.Pointer<Context>> context_ffi,
);

typedef _dart_create_context = int Function(
  TransportParams params,
  ffi.Pointer<ffi.Int8> public_key,
  int contract_type,
  int subscription_port,
  ffi.Pointer<ffi.Int8> keystore_data,
  ffi.Pointer<ffi.Pointer<Context>> context_ffi,
);

typedef _c_delete_context = ffi.Int32 Function(
  ffi.Pointer<Context> context,
);

typedef _dart_delete_context = int Function(
  ffi.Pointer<Context> context,
);

typedef _c_delete_gql_transport = ffi.Int32 Function(
  ffi.Pointer<GqlTransport> gql_transport,
);

typedef _dart_delete_gql_transport = int Function(
  ffi.Pointer<GqlTransport> gql_transport,
);

typedef _c_delete_subscription = ffi.Int32 Function(
  ffi.Pointer<TonWalletSubscription> subscription,
);

typedef _dart_delete_subscription = int Function(
  ffi.Pointer<TonWalletSubscription> subscription,
);

typedef _c_send = ffi.Int32 Function(
  ffi.Pointer<Context> ctx,
  ffi.Pointer<ffi.Int8> sign_data,
  ffi.Int64 answer_port,
  ffi.Pointer<ffi.Int8> comment,
  ffi.Pointer<ffi.Int8> to,
  ffi.Uint64 amount,
);

typedef _dart_send = int Function(
  ffi.Pointer<Context> ctx,
  ffi.Pointer<ffi.Int8> sign_data,
  int answer_port,
  ffi.Pointer<ffi.Int8> comment,
  ffi.Pointer<ffi.Int8> to,
  int amount,
);
