// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Nekoton core bindings
class NekotonBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NekotonBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NekotonBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int create_runtime(
    RuntimeParams params,
    ffi.Pointer<ffi.Pointer<Runtime>> runtime,
  ) {
    return _create_runtime(
      params,
      runtime,
    );
  }

  late final _create_runtime_ptr =
      _lookup<ffi.NativeFunction<_c_create_runtime>>('create_runtime');
  late final _dart_create_runtime _create_runtime =
      _create_runtime_ptr.asFunction<_dart_create_runtime>();

  void delete_runtime(
    ffi.Pointer<Runtime> runtime,
  ) {
    return _delete_runtime(
      runtime,
    );
  }

  late final _delete_runtime_ptr =
      _lookup<ffi.NativeFunction<_c_delete_runtime>>('delete_runtime');
  late final _dart_delete_runtime _delete_runtime =
      _delete_runtime_ptr.asFunction<_dart_delete_runtime>();

  ffi.Pointer<ffi.Int8> rust_greeting(
    ffi.Pointer<ffi.Int8> to,
  ) {
    return _rust_greeting(
      to,
    );
  }

  late final _rust_greeting_ptr =
      _lookup<ffi.NativeFunction<_c_rust_greeting>>('rust_greeting');
  late final _dart_rust_greeting _rust_greeting =
      _rust_greeting_ptr.asFunction<_dart_rust_greeting>();

  void rust_cstr_free(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _rust_cstr_free(
      s,
    );
  }

  late final _rust_cstr_free_ptr =
      _lookup<ffi.NativeFunction<_c_rust_cstr_free>>('rust_cstr_free');
  late final _dart_rust_cstr_free _rust_cstr_free =
      _rust_cstr_free_ptr.asFunction<_dart_rust_cstr_free>();
}

class Runtime extends ffi.Opaque {}

class RuntimeParams extends ffi.Struct {
  @ffi.Uint32()
  external int worker_threads;
}

typedef _c_create_runtime = ffi.Uint8 Function(
  RuntimeParams params,
  ffi.Pointer<ffi.Pointer<Runtime>> runtime,
);

typedef _dart_create_runtime = int Function(
  RuntimeParams params,
  ffi.Pointer<ffi.Pointer<Runtime>> runtime,
);

typedef _c_delete_runtime = ffi.Void Function(
  ffi.Pointer<Runtime> runtime,
);

typedef _dart_delete_runtime = void Function(
  ffi.Pointer<Runtime> runtime,
);

typedef _c_rust_greeting = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> to,
);

typedef _dart_rust_greeting = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> to,
);

typedef _c_rust_cstr_free = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_rust_cstr_free = void Function(
  ffi.Pointer<ffi.Int8> s,
);
